import { useState } from 'react'
import { Button } from '@/components/ui/button.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Download, Upload, CheckCircle2, XCircle, Zap, Info } from 'lucide-react'
import './App.css'

function App() {
  const [priceList, setPriceList] = useState('')
  const [productList, setProductList] = useState('')
  const [matchResult, setMatchResult] = useState('')
  const [stats, setStats] = useState({ matched: 0, unmatched: 0, total: 0 })

  // Parse price list into structured data
  const parsePriceList = (text) => {
    const lines = text.trim().split('\n')
    const prices = []
    let currentCategory = 'DEFAULT' // Default category if none provided

    for (const line of lines) {
      const trimmed = line.trim()
      if (!trimmed) continue

      // Skip header rows (CAP QTY HKD, etc.)
      const upperLine = trimmed.toUpperCase()
      if (upperLine.includes('CAP') && upperLine.includes('QTY') && upperLine.includes('HKD')) {
        continue
      }

      // Check if it's a category line (no tabs, all caps)
      if (!trimmed.includes('\t') && trimmed === trimmed.toUpperCase()) {
        currentCategory = trimmed
        continue
      }

      // Parse price line
      const parts = trimmed.split('\t')
      if (parts.length >= 3) {
        const model = parts[0].trim()
        
        // Detect if second column is a part number or capacity
        // Part numbers are usually alphanumeric codes like "MRYN3LL", "MXP93LL"
        // Capacities are like "256GB", "512GB", "1TB"
        const secondCol = parts[1].trim()
        const isPartNumber = /^[A-Z0-9]{6,10}$/i.test(secondCol) && !secondCol.match(/\d+(GB|TB)$/i)
        
        let capacity = ''
        let qty = 0
        let price = 0
        
        if (isPartNumber) {
          // Format: MODEL [TAB] PARTNUMBER [TAB] QTY [TAB] PRICE
          // We ignore the part number
          qty = parseInt(parts[2]) || 0
          price = parseFloat(parts[3]) || 0
        } else {
          // Format: MODEL [TAB] CAPACITY [TAB] QTY [TAB] PRICE
          capacity = secondCol
          qty = parseInt(parts[2]) || 0
          price = parseFloat(parts[3]) || 0
        }

        prices.push({
          category: currentCategory,
          model: model,
          capacity: capacity,
          qty: qty,
          price: price
        })
      }
    }

    return prices
  }

  // Parse product list with line numbers
  const parseProductList = (text) => {
    const lines = text.trim().split('\n')
    const products = []
    let currentCategory = 'DEFAULT' // Default category if none provided

    for (const line of lines) {
      const trimmed = line.trim()
      if (!trimmed) continue

      // Skip header rows
      const upperLine = trimmed.toUpperCase()
      if (upperLine.includes('CAP') && upperLine.includes('QTY') && upperLine.includes('HKD')) {
        continue
      }

      // Check if it's a category line
      if (!trimmed.includes('\t') && trimmed === trimmed.toUpperCase()) {
        currentCategory = trimmed
        continue
      }

      // Parse product line with line number
      const parts = trimmed.split('\t')
      
      // Handle two formats:
      // Format 1: lineNum[TAB]description (2 parts)
      // Format 2: lineNum[TAB]notes[TAB]description (3+ parts, ignore column B)
      if (parts.length >= 2) {
        const lineNum = parts[0].trim()
        let description = ''
        
        if (parts.length === 2) {
          // Format 1: lineNum[TAB]description
          description = parts[1].trim()
        } else if (parts.length >= 3) {
          // Format 2: lineNum[TAB]notes[TAB]description
          // Always use column C (parts[2]) as description, ignore column B
          description = parts[2].trim()
        }
        
        if (lineNum && description) {
          products.push({
            lineNum,
            description,
            category: currentCategory
          })
        }
      }
    }

    return products
  }

  // Extract capacity from product description
  const extractCapacity = (description) => {
    const capacityMatch = description.match(/\b(\d+(?:GB|TB))\b/i)
    return capacityMatch ? capacityMatch[1].toUpperCase() : ''
  }

  // Extract model name without capacity (and optionally without color)
  const extractModelName = (text, removeColor = false) => {
    // Remove capacity (e.g., 128GB, 256GB, 512GB, 1TB, 2TB)
    let model = text.replace(/\b\d+(?:GB|TB)\b/gi, '').trim()
    
    // Optionally remove common color names
    if (removeColor) {
      const colors = ['BLACK', 'WHITE', 'BLUE', 'ORANGE', 'SILVER', 'GOLD', 'NATURAL', 'DESERT', 
                      'PINK', 'ULTRAMARINE', 'GRAY', 'GREY', 'GREEN', 'RED', 'PURPLE', 
                      'YELLOW', 'LAVENDER', 'SAGE', 'MIDNIGHT', 'STARLIGHT', 'TITANIUM',
                      'SPACE', 'ROSE', 'CORAL', 'TEAL', 'INDIGO', 'CRIMSON']
      
      for (const color of colors) {
        const regex = new RegExp(`\\b${color}\\b\\s*$`, 'i')
        model = model.replace(regex, '').trim()
      }
    }
    
    return model.toUpperCase().replace(/\s+/g, ' ')
  }

  // Check if category requires color matching
  const needsColorMatch = (category) => {
    const cat = category.toUpperCase()
    // LOCKED categories and DEFAULT (no category) don't need color matching
    return !cat.includes('LOCKED') && cat !== 'DEFAULT'
  }

  // Check if product needs capacity matching (iPhone and iPad only)
  const needsCapacityMatch = (description) => {
    const upper = description.toUpperCase()
    return upper.includes('IPHONE') || upper.includes('IPAD')
  }

  // Check if two model names match exactly
  const modelsMatch = (productModel, priceModel) => {
    const p = productModel.toUpperCase().trim()
    const pr = priceModel.toUpperCase().trim()
    
    // Exact match
    if (p === pr) return true
    
    // For more flexible matching, check if they're essentially the same
    // by comparing word by word
    const pWords = p.split(/\s+/).filter(w => w.length > 0)
    const prWords = pr.split(/\s+/).filter(w => w.length > 0)
    
    // Must have same number of words for exact model match
    if (pWords.length !== prWords.length) return false
    
    // All words must match
    for (let i = 0; i < pWords.length; i++) {
      if (pWords[i] !== prWords[i]) return false
    }
    
    return true
  }

  // Match products with prices
  const matchProducts = () => {
    const prices = parsePriceList(priceList)
    const products = parseProductList(productList)
    
    if (prices.length === 0 || products.length === 0) {
      alert('請先輸入價格列表和產品列表')
      return
    }

    const results = []
    let matchedCount = 0
    let unmatchedCount = 0

    for (const product of products) {
      const productCapacity = extractCapacity(product.description)
      const requiresCapacity = needsCapacityMatch(product.description)
      const requiresColor = needsColorMatch(product.category)

      // Extract model name (remove color only for LOCKED categories)
      const productModel = extractModelName(product.description, !requiresColor)

      // Find matching price
      let matchedPrice = null

      for (const price of prices) {
        // Category must match
        if (price.category !== product.category) continue

        // Extract price model name (remove color only for LOCKED categories)
        const priceModel = extractModelName(price.model, !requiresColor)
        
        // Check if models match exactly
        if (!modelsMatch(productModel, priceModel)) {
          continue
        }
        
        // For iPhone and iPad, capacity must also match
        if (requiresCapacity) {
          if (price.capacity && productCapacity && price.capacity !== productCapacity) {
            continue // Skip if capacity doesn't match
          }
        }

        // Found a match
        matchedPrice = price
        break
      }

      if (matchedPrice !== null) {
        results.push(`${product.lineNum}\t${matchedPrice.price}`)
        matchedCount++
      } else {
        results.push(`${product.lineNum}\t`)
        unmatchedCount++
      }
    }

    setMatchResult(results.join('\n'))
    setStats({
      matched: matchedCount,
      unmatched: unmatchedCount,
      total: products.length
    })
  }

  // Copy result to clipboard
  const copyToClipboard = () => {
    navigator.clipboard.writeText(matchResult)
    alert('結果已複製到剪貼板')
  }

  // Download result as text file
  const downloadResult = () => {
    const blob = new Blob([matchResult], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'price_match_result.txt'
    a.click()
    URL.revokeObjectURL(url)
  }

  // Clear all inputs
  const clearAll = () => {
    setPriceList('')
    setProductList('')
    setMatchResult('')
    setStats({ matched: 0, unmatched: 0, total: 0 })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-slate-900 dark:to-slate-800 p-4 md:p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-block p-3 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl mb-4">
            <Zap className="w-12 h-12 text-white" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-3">
            產品價格匹配系統
          </h1>
          <p className="text-lg text-slate-600 dark:text-slate-400">
            自動匹配產品列表與價格，快速生成報價結果
          </p>
        </div>

        {/* Info Banner */}
        <div className="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg flex items-start gap-3">
          <Info className="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
          <div className="text-sm text-blue-900 dark:text-blue-100">
            <strong>匹配規則：</strong>
            <ul className="mt-1 space-y-1">
              <li>• iPhone 和 iPad 需要同時匹配型號和容量</li>
              <li>• LOCKED 類別：不需要匹配顏色（任何顏色都可以）</li>
              <li>• UNLOCKED 和其他類別：需要匹配顏色</li>
              <li>• 其他產品（MacBook, Apple Watch, AirPods 等）只需匹配型號</li>
              <li>• 系統會自動忽略 Part Number（如 MRYN3LL, MXP93LL）</li>
              <li>• 產品列表支援備注欄位（Column B 會被自動忽略）</li>
            </ul>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Price List Input */}
          <Card className="shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-t-lg">
              <CardTitle className="flex items-center gap-2">
                <Upload className="w-5 h-5" />
                第一步：輸入價格列表
              </CardTitle>
              <CardDescription className="text-blue-100">
                貼上您的 PRICE LIST（格式：類別、型號、容量/Part Number、數量、價格）
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <Textarea
                placeholder="LOCKED N/A&#10;IPHONE 17 PRO ORANGE&#9;256GB&#9;2&#9;790&#10;IPHONE 17 PRO BLUE&#9;256GB&#9;9&#9;770&#10;&#10;AIRPODS N/A&#10;AIRPODS 4TH GEN ANC&#9;MXP93LL&#9;35&#9;136"
                className="min-h-[400px] font-mono text-sm"
                value={priceList}
                onChange={(e) => setPriceList(e.target.value)}
              />
            </CardContent>
          </Card>

          {/* Product List Input */}
          <Card className="shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-t-lg">
              <CardTitle className="flex items-center gap-2">
                <Upload className="w-5 h-5" />
                第二步：輸入產品列表
              </CardTitle>
              <p className="text-sm text-purple-700 dark:text-purple-300">
                貼上您的 LIST（格式：行號、產品描述，支援備注欄）
              </p>            </CardHeader>
            <CardContent className="pt-6">
              <Textarea
                placeholder="LOCKED N/A&#10;2&#9;IPHONE 17 PRO 256GB ORANGE&#10;3&#9;IPHONE 17 PRO 256GB ORANGE&#10;4&#9;IPHONE 17 PRO 256GB BLUE&#10;&#10;AIRPODS N/A&#10;69&#9;AIRPODS 4TH GEN ANC"
                className="min-h-[400px] font-mono text-sm"
                value={productList}
                onChange={(e) => setProductList(e.target.value)}
              />
            </CardContent>
          </Card>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-center gap-4 mb-6">
          <Button 
            onClick={matchProducts}
            size="lg"
            className="text-lg px-8 py-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl transition-all"
          >
            <Zap className="w-5 h-5 mr-2" />
            開始匹配價格
          </Button>
          <Button 
            onClick={clearAll}
            size="lg"
            variant="outline"
            className="text-lg px-8 py-6"
          >
            清除全部
          </Button>
        </div>

        {/* Results */}
        {matchResult && (
          <Card className="shadow-lg">
            <CardHeader className="bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-t-lg">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle2 className="w-5 h-5" />
                    匹配結果
                  </CardTitle>
                  <CardDescription className="text-green-100">
                    系統已完成自動匹配
                  </CardDescription>
                </div>
                <div className="flex gap-2">
                  <Button onClick={copyToClipboard} variant="secondary" size="sm">
                    複製結果
                  </Button>
                  <Button onClick={downloadResult} variant="secondary" size="sm">
                    <Download className="w-4 h-4 mr-2" />
                    下載
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="pt-6">
              {/* Stats */}
              <div className="flex flex-wrap gap-3 mb-4">
                <Badge variant="default" className="text-sm py-2 px-4 bg-slate-700">
                  總數: {stats.total}
                </Badge>
                <Badge variant="default" className="text-sm py-2 px-4 bg-green-600">
                  <CheckCircle2 className="w-4 h-4 mr-1" />
                  已匹配: {stats.matched}
                </Badge>
                <Badge variant="destructive" className="text-sm py-2 px-4">
                  <XCircle className="w-4 h-4 mr-1" />
                  未匹配: {stats.unmatched}
                </Badge>
                {stats.matched > 0 && (
                  <Badge variant="default" className="text-sm py-2 px-4 bg-blue-600">
                    成功率: {((stats.matched / stats.total) * 100).toFixed(1)}%
                  </Badge>
                )}
              </div>

              {/* Result Text */}
              <Textarea
                value={matchResult}
                readOnly
                className="min-h-[400px] font-mono text-sm bg-slate-50 dark:bg-slate-900"
              />
            </CardContent>
          </Card>
        )}

        {/* Footer */}
        <div className="mt-8 text-center text-sm text-slate-500 dark:text-slate-400">
          <p>© 2025 產品價格匹配系統 - 快速、準確、高效</p>
        </div>
      </div>
    </div>
  )
}

export default App
